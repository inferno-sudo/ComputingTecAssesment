# Getting the micropython libaries needed for the algorithm
from pybricks.ev3devices import Motor, ColorSensor, UltrasonicSensor, TouchSensor
from pybricks.parameters import Port, Color, Stop
from pybricks.robotics import DriveBase
from pybricks.tools import wait

# -- Initializing the Ev3 robot --

# Initialize the motors, (Intialize means to set up)
left_motor = Motor(Port.B)
right_motor = Motor(Port.C)
gripper_motor = Motor(Port.A)

#Initialize the sensors
# For line following and colour detection
color_sensor = ColorSensor(Port.S3)
# To sense other obstacles in the way           
ultrasonic_sensor = UltrasonicSensor(Port.S1)
# Boots the program up 
touch_sensor = TouchSensor(Port.S2)           

# Initialize the drive base
robot = DriveBase(left_motor, right_motor, wheel_diameter=56, axle_track=114)

# -- Setting up the colours to detect for --
TARGET_COLORS = [Color.RED, Color.YELLOW]

# Drop off locations for the robot
DROP_OFF_LOCATIONS = {
    Color.RED: (300, 0),
    Color.YELLOW: (0, 300)
}

# -- Keeps the robot iniside of the black border --
def stay_within_bounds():
    if color_sensor.color() == Color.BLACK:
        # Stops when it is at the black line
        robot.stop()     
        # Goes back       
        robot.straight(-50) 
        # Turns to then start the alogrithm again   
        robot.turn(90)         

# -- Code for the robot to avoid obstacles --
def avoid_obstacles():
    # Senses an obstacle less than 10 cm
    if ultrasonic_sensor.distance() < 100: 
        robot.stop()
        # Goes back
        robot.straight(-50)
        # Turns to start the algorithm again 
        robot.turn(90)       

# -- The code for the robot to search for the blocks --
def find_block():
    while True:
        # Makes the robot stay inside of the border
        stay_within_bounds()
        # Makes the robot detect and stay away from obstacles      
        avoid_obstacles()         

        # Line following using the reflection of the light
        reflection = color_sensor.reflection()
        turn_rate = (50 - reflection) * 1.5
        robot.drive(100, turn_rate)

        # Firgures out if the clour is found
        color = color_sensor.color()
        if color in TARGET_COLORS:
            robot.stop()
            # Gives the deteced block back
            return color  
        
# -- Makes the gripper grab the block --
def pick_up_block():
    # Opens the grippere
    gripper_motor.run_angle(200, -90) 
    wait(500)
    # Closes the gripper to pick up the block
    gripper_motor.run_angle(200, 180)  
    wait(500)

# -- Opens the gripper again to drop the block --
def drop_block():
    # Where the gripper opens up
    gripper_motor.run_angle(200, -180) 
    wait(500)

# -- Drives the robot to an unspecified location --
def go_to_location(x, y):
    robot.straight(x)  
    robot.turn(90)     
    robot.straight(y)  


# -- Waits for the touch sensor to start --
print("Press touch sensor to start.")
while not touch_sensor.pressed():
    wait(10)

# -- A nested loop for the code to run effeciently --
for _ in range(2):
    # Finds a block
    color = find_block()
    # Picks up the block
    pick_up_block()  
    # finds the dropping zone            
    x, y = DROP_OFF_LOCATIONS[color] 
    # Goes to the dropping zone
    go_to_location(x, y)
    # Drops the block in the dropping zone       
    drop_block()              
    robot.straight(-100)    
